<!DOCTYPE html>
<div class="container" data-id = "<%= app._id %>">
	<br>
	<% if (app) { %>
	  	<legend>
	  		App Name: <a class="name" href="/app?app_id=<%= app._id %>"><%= app.name %></a>
	  	</legend>
	  	<p>Description:</p>
	  	<p class="description"><%= app.description %></p>
	  	<div class="row">
	  		<div class="col-md-6">
			  	<h3>Compact Mode Preview:</h3>
				<div id="compactView" style="width:400;height:400;"></div>
			</div>
	  		<div class="col-md-6">
			  	<h3>Immersive Mode Preview:</h3>
				<div id="immersiveView" style="width:400;height:400;"></div>
			</div>
		</div>
		<hr>
		<div class="alert alert-info">
			Type the code (<b><span id="directCode"></span></b>) into the vOS controller to try this app now! Don't have the vOS controller on your phone? Download it <a href="/try">here</a>.
		</div>
	<% } else { %>
		Sorry, the app you are looking for was either removed or never existed in the first place!
	<% } %>
</div>
<script type="text/javascript" src="/js/three.min.js"></script>
<script type="text/javascript" src="/Browserify/compiledJS/controls.js"></script>
<script>
var socket2 = io.connect('/');//Need a different code
socket2.on('code', function(data) {
	if (data.name == 'appSpecific') {
		$('#directCode').text(data.code);
	}
});
socket2.on('session_id', function(data) {
	console.log(data.id);
	if (data.name == 'appSpecific') {
		window.location = "/enter?session_id=" + data.id + "&app_id=<%= app._id %>&from=" + encodeURIComponent(window.location.href);
	}
});      
socket2.emit('declare-type', {type: 'page', name: 'appSpecific'});

var $compactView = $('#compactView');
var $immersiveView = $('#immersiveView');

WIDTH = 400;
HEIGHT = 400;
var VIEW_ANGLE = 45,
  ASPECT = WIDTH / HEIGHT,
  NEAR = 0.1,
  FAR = 10000;
var camera_start = {
	x: Math.PI/2,
	y: 0,
	z: 15
};

var camera1 = new THREE.PerspectiveCamera(VIEW_ANGLE, ASPECT, NEAR, FAR);
camera1.rotation.x = camera_start.x;
camera1.position.y = camera_start.y + 200;
camera1.position.z = camera_start.z;
var renderer1 = new THREE.WebGLRenderer( {antialias:true} );
renderer1.autoClearColor = true;
renderer1.setSize(WIDTH, HEIGHT);
$compactView.append(renderer1.domElement);
var scene1 = new THREE.Scene();

var camera2 = new THREE.PerspectiveCamera(VIEW_ANGLE, ASPECT, NEAR, FAR);
camera2.rotation.x = camera_start.x;
camera2.position.y = camera_start.y;
camera2.position.z = camera_start.z;
var renderer2 = new THREE.WebGLRenderer( {antialias:true} );
renderer2.autoClearColor = true;
renderer2.setSize(WIDTH, HEIGHT);
$immersiveView.append(renderer2.domElement);
var scene2 = new THREE.Scene();

var angle = 0;
var render = function() {
	requestAnimationFrame( render );

	angle += 0.005;
	camera1.rotation.y = angle;
	camera1.position.y = Math.cos(camera1.rotation.y) * (camera_start.y - 140) + Math.sin(camera1.rotation.y) * camera_start.x + 200;
	camera1.position.x = -Math.sin(camera1.rotation.y) * (camera_start.y - 140) + Math.cos(camera1.rotation.y) * camera_start.x;
	renderer1.render(scene1, camera1);

	camera2.rotation.y = angle;
	camera2.position.y = Math.cos(camera2.rotation.y) * camera_start.y + Math.sin(camera2.rotation.y) * camera_start.x;
	camera2.position.x = -Math.sin(camera2.rotation.y) * camera_start.y + Math.cos(camera2.rotation.y) * camera_start.x;
	renderer2.render(scene2, camera2);
};

render();

var mockState = {
	unitWidth: 1/12,
	unitHeight: 1/9,
	hidden: true,
	getPanelApp: function() {},
	canMinimize: function() {},
	canMaximize: function() {},
	close: function() {},
	toggleMaxMin: function() {},
	mode: 'Normal',
	modes: {
		Normal: 'normal',
		AppSwitch: 'app-switch',
		Notifications: 'notifications'
	}
};

var mockUtil = {
	makeText: function() {},
	setPanelPosition: function() {},
	distance: function() {},
	vector: function() {}
};

var controls = controlObjects.setUp(mockState, mockUtil);

(function(THREE, controls, appURL, scene){
  window.Controls = controls;
  window.vOS = {
    onEvent: function(eventType, f) {
      this.app.event[eventType] = f;
    },
    makeTextMesh: function(options) {
      text = options.text || '';
      px = options.px || 30;
      width = options.width || 20;
      height = options.height || 20;
      canvas1 = document.createElement('canvas');
      canvas1.height = px + 10;
      canvas1.width = canvas1.height * width / height * 2;
      context1 = canvas1.getContext('2d');
      context1.font = 'Bold ' + px + ' px Arial';
      context1.fillStyle = 'rgba(255,255,255,0.95)';
      context1.fillText(' ' + text, 0, px);
      texture1 = new THREE.Texture(canvas1); 
      texture1.needsUpdate = true;
      material1 = new THREE.MeshBasicMaterial( {map: texture1, side: THREE.DoubleSide } );
      material1.transparent = true;
      return new THREE.Mesh(new THREE.PlaneGeometry(width, height), material1);
    },
    getValues: function() {},
    getValue: function(name) {},
    addListener: function(name, f) {},
    removeListener: function(name, f) {},
    app: {
      event: {}
    }
  }

  var mockApp = {
    panel: {
        add: function(){},
        set: function(){}
    },
    user: {
      id: 1
    }
  };
  $.getScript(appURL, function() {
    if (vOS.app.event.load) {
      vOS.app.event.load(mockApp);

      if (mockApp.drawContained) {
        mockApp.drawContained(scene);
      }
    } else {
      console.log('App from ' + appURL + ' Failed To Load')
    }
  });
})(THREE, controls, '<%= app.url %>', scene1);


(function(THREE, controls, appURL, scene){
  window.Controls = controls;
  window.vOS = {
    onEvent: function(eventType, f) {
      this.app.event[eventType] = f;
    },
    makeTextMesh: function(options) {
      text = options.text || '';
      px = options.px || 30;
      width = options.width || 20;
      height = options.height || 20;
      canvas1 = document.createElement('canvas');
      canvas1.height = px + 10;
      canvas1.width = canvas1.height * width / height * 2;
      context1 = canvas1.getContext('2d');
      context1.font = 'Bold ' + px + ' px Arial';
      context1.fillStyle = 'rgba(255,255,255,0.95)';
      context1.fillText(' ' + text, 0, px);
      texture1 = new THREE.Texture(canvas1); 
      texture1.needsUpdate = true;
      material1 = new THREE.MeshBasicMaterial( {map: texture1, side: THREE.DoubleSide } );
      material1.transparent = true;
      return new THREE.Mesh(new THREE.PlaneGeometry(width, height), material1);
    },
    getValues: function() {},
    getValue: function(name) {},
    addListener: function(name, f) {},
    removeListener: function(name, f) {},
    app: {
      event: {}
    }
  }

  var mockApp = {
    panel: {
        add: function(){},
        set: function(){}
    },
    user: {
      id: 1
    }
  };
  $.getScript(appURL, function() {
    if (vOS.app.event.load) {
      vOS.app.event.load(mockApp);
      if (mockApp.drawImmersive) {
		mockApp.drawImmersive(scene);
      } else if (mockApp.drawImmersiveBackground){
	    mockApp.drawImmersiveBackground(scene);
      }
    } else {
      console.log('App from ' + appURL + ' Failed To Load')
    }
  });
})(THREE, controls, '<%= app.url %>', scene2);

/*
(function(THREE, controls, appURL, scene){
	window.module = {};
	window.module.exports = {};
	window.exports = window.module.exports;
	window.Controls = controls;
  	$.getScript(appURL, function() {
	    //eval(data.contents);
	    //console.log(appURL);
	    var app = window.module.exports;
        if (app != undefined) {
	        var mockData = {
	        	panel: {
				   	  add: function(){},
				      set: function(){}
				},
				userID: '1'
		    };
	        app.setUp(mockData);
		    if (app.drawContained) {
			  app.drawContained(scene);
		    }
	    } else {
            console.log('App from ' + data.url + ' Failed To Load');
        }
	});
})(THREE, controls, '<%= app.url %>', scene1);*/


</script>
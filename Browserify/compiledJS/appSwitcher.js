// Generated by CoffeeScript 1.7.1
var appSwitcher;

appSwitcher = exports;

appSwitcher.setUp = function(state, util, controls) {
  var mode, modes, page, query, resetPanel, searchResults, selectionIndex, update;
  state.notificationPanel = new controls.Panel();
  state.notificationPanel.objects = [];
  state.appSwitcher = {
    index: -1,
    panel: new controls.Panel(),
    external: {}
  };
  searchResults = [];
  selectionIndex = 0;
  modes = ['Recent', 'Search'];
  mode = modes[0];
  state.appSwitcher.external.drawContained = function(scene) {
    var i, testText, text, _i, _ref, _results;
    if (mode === 'Search' && searchResults.length > 0) {
      _results = [];
      for (i = _i = 0, _ref = searchResults.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        text = selectionIndex === i ? '> ' + searchResults[i].name : searchResults[i].name;
        testText = util.makeText(text, 30, 100, 20);
        testText.rotation.x = Math.PI / 2;
        testText.position.y = 200;
        testText.position.z = 50 + (selectionIndex - i) * 20;
        _results.push(scene.add(testText));
      }
      return _results;

      /*
      greenScreen = new THREE.MeshBasicMaterial( { color: 0x00ff00 } )
      screen = new THREE.Mesh(new THREE.PlaneGeometry(100, 100), greenScreen)
      screen.rotation.x = Math.PI / 2
      screen.position.z = 50
      scene.add(screen)
       */
    }
  };
  query = '';
  page = 0;
  resetPanel = function(panel) {
    var app, appIcon, backIcon, closeButton, column, description, drag, goToSearch, i, input, maxPages, nextIcon, output, recentButton, row, search, select, welcome, yref, _i, _ref, _ref1, _ref2;
    panel.objects = [];
    if (mode === modes[0]) {
      app = void 0;
      maxPages = Math.ceil(state.apps.length / 6);
      if (maxPages === 0) {
        page = 0;
      } else if (page > maxPages - 1) {
        page = maxPages - 1;
      }
      if (page > 0) {
        backIcon = new controls.Button(0, 3, 0.5, 1, {
          text: '<'
        });
        backIcon.onClick(function() {
          page--;
          return resetPanel(panel);
        });
        panel.add(backIcon);
      }
      if (page < maxPages - 1) {
        nextIcon = new controls.Button(11.5, 3, 0.5, 1, {
          text: '>'
        });
        nextIcon.onClick(function() {
          page++;
          return resetPanel(panel);
        });
        panel.add(nextIcon);
      }
      if (state.apps.length > 0) {
        for (i = _i = _ref = 6 * page, _ref1 = Math.min(6 + 6 * page, state.apps.length); _ref <= _ref1 ? _i < _ref1 : _i > _ref1; i = _ref <= _ref1 ? ++_i : --_i) {
          app = state.apps[state.apps.length - i - 1];
          row = Math.floor((i - 6 * page) / 2);
          column = (i - 6 * page) % 2;
          closeButton = new controls.Button(5 + column * 5.5, 5 - 2 * row, 0.5, 1, {
            text: 'X'
          });
          closeButton.onClick((function(app) {
            return function() {
              var index, index2, k, v, _j, _len, _ref2;
              index = state.user.recent.indexOf(app._id);
              if (index >= 0) {
                state.user.recent.splice(index, 1);
              }
              index2 = -1;
              _ref2 = state.apps;
              for (k = _j = 0, _len = _ref2.length; _j < _len; k = ++_j) {
                v = _ref2[k];
                if (v._id === app._id) {
                  index2 = k;
                }
              }
              if (index2 >= 0) {
                state.apps.splice(index2, 1);
              }
              $.post('http://vos.jit.su/removeAppMRU?token=' + token, {
                appID: app._id
              });
              return resetPanel(panel);
            };
          })(app));
          appIcon = new controls.Button(1 + column * 5.5, 5 - 2 * row, 4, 1, {
            text: app.name,
            icon: app.icon
          });
          appIcon.onClick((function(app) {
            return function() {
              return state.open(app, controls);
            };
          })(app));
          panel.add(appIcon);
          panel.add(closeButton);
        }
      }
      welcome = ((_ref2 = state.user) != null ? _ref2.name : void 0) != null ? state.user.name + ', please choose an app: ' : 'Please choose an app: ';
      description = new controls.Label(3.5, 7, 8.5, 1, {
        text: welcome
      });
      panel.add(description);
      goToSearch = new controls.Button(0, 7, 3, 1, {
        text: 'Go to Search'
      });
      goToSearch.onClick(function() {
        console.log('Searching!');
        mode = modes[1];
        return resetPanel(panel);
      });
      return panel.add(goToSearch);
    } else if (mode === modes[1]) {
      input = new Controls.Keyboard(0, 0, 9, 6);
      panel.add(input);
      drag = new Controls.Treadmill(9.5, 3, 2, 2, {
        y: true
      });
      panel.add(drag);
      yref = 0;
      drag.onMove(function(x, y) {
        var increments;
        increments = 0.1;
        if (yref - y > (searchResults.length - 1) * increments) {
          yref = y + (searchResults.length - 1) * increments;
        }
        if (yref - y < 0) {
          yref = y;
        }
        return selectionIndex = Math.floor((yref - y) / increments);
      });
      select = new Controls.Button(9.5, 1, 2, 1, {
        text: 'Open'
      });
      panel.add(select);
      select.onClick(function() {
        console.log(searchResults[selectionIndex]);
        return state.addURL(searchResults[selectionIndex].url, searchResults[selectionIndex], true);
      });
      output = new Controls.Label(0, 6, 12, 1, {
        text: ''
      });
      panel.add(output);
      input.onTextUpdate(function(text) {
        query = text;
        return output.updateOptions({
          text: text
        });
      });
      search = new Controls.Button(10, 7, 2, 1, {
        text: 'Search'
      });
      search.onClick(function() {
        console.log('Searching for ' + query);
        console.log("/appSearchJSON?query=" + query);
        return util.getAsync("/appSearchJSON?query=" + query, function(data) {
          searchResults = data;
          return selectionIndex = 0;
        });
      });
      panel.add(search);
      recentButton = new Controls.Button(0, 7, 4, 1, {
        text: '< Recent Apps'
      });
      panel.add(recentButton);
      return recentButton.onClick(function() {
        mode = modes[0];
        return resetPanel(panel);
      });
    }
  };
  update = function() {
    mode = modes[0];
    return resetPanel(state.appSwitcher.panel);
  };
  update();
  return state.onAppListUpdate(update);
};

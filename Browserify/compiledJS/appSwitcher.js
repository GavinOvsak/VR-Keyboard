// Generated by CoffeeScript 1.7.1
var appSwitcher;

appSwitcher = exports;

appSwitcher.setUp = function(state, util, controls) {
  var mode, modes, query, resetPanel, searchResults, selectionIndex, update;
  state.notificationPanel = new controls.Panel();
  state.notificationPanel.objects = [];
  state.appSwitcher = {
    index: -1,
    panel: new controls.Panel(),
    external: {}
  };
  searchResults = [];
  selectionIndex = 0;
  modes = ['Recent', 'Search'];
  mode = modes[0];
  state.appSwitcher.external.drawContained = function(scene) {
    var i, testText, text, _i, _ref, _results;
    if (mode === 'Search' && searchResults.length > 0) {
      _results = [];
      for (i = _i = 0, _ref = searchResults.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        text = selectionIndex === i ? '> ' + searchResults[i].name : searchResults[i].name;
        testText = util.makeText(text, 30, 100, 20);
        testText.rotation.x = Math.PI / 2;
        testText.position.y = 200;
        testText.position.z = 50 + (selectionIndex - i) * 20;
        _results.push(scene.add(testText));
      }
      return _results;

      /*
      			greenScreen = new THREE.MeshBasicMaterial( { color: 0x00ff00 } )
      			screen = new THREE.Mesh(new THREE.PlaneGeometry(100, 100), greenScreen)
      			screen.rotation.x = Math.PI / 2
      			screen.position.z = 50
      			scene.add(screen)
       */
    }
  };
  query = '';
  resetPanel = function(panel) {
    var app, appIcon, column, description, drag, goToSearch, i, input, output, recentButton, row, search, select, yref, _i, _ref;
    panel.objects = [];
    if (mode === modes[0]) {
      row = 0;
      column = 0;
      app;
      for (i = _i = 0, _ref = state.apps.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (!(row < 3)) {
          continue;
        }
        app = state.apps[i];
        appIcon = new controls.Button(0.5 + column * 6, 5 - 2 * row, 5, 1, {
          text: app.name,
          icon: app.icon
        });
        appIcon.onClick((function(index) {
          return function() {
            return state.open(state.apps[index]);
          };
        })(i));
        panel.add(appIcon);
        if (column >= 2) {
          column = 0;
          row++;
        } else {
          column++;
        }
      }
      description = new controls.Label(6, 7, 6, 1, {
        text: 'Please choose an app: '
      });
      panel.add(description);
      goToSearch = new controls.Button(0, 7, 3, 1, {
        text: 'Go to Search'
      });
      goToSearch.onClick(function() {
        console.log('Searching!');
        mode = modes[1];
        return resetPanel(panel);
      });
      return panel.add(goToSearch);
    } else if (mode === modes[1]) {
      input = new Controls.Keyboard(0, 0, 9, 6);
      panel.add(input);
      drag = new Controls.Treadmill(9.5, 3, 2, 2, {
        y: true
      });
      panel.add(drag);
      yref = 0;
      drag.onMove(function(x, y) {
        var increments;
        increments = 0.1;
        if (yref - y > (searchResults.length - 1) * increments) {
          yref = y + (searchResults.length - 1) * increments;
        }
        if (yref - y < 0) {
          yref = y;
        }
        return selectionIndex = Math.floor((yref - y) / increments);
      });
      select = new Controls.Button(9.5, 1, 2, 1, {
        text: 'Open'
      });
      panel.add(select);
      select.onClick(function() {
        console.log(searchResults[selectionIndex]);
        return state.addURL(searchResults[selectionIndex].url, searchResults[selectionIndex], true);
      });
      output = new Controls.Label(0, 6, 12, 1, {
        text: ''
      });
      panel.add(output);
      input.onTextUpdate(function(text) {
        query = text;
        return output.updateOptions({
          text: text
        });
      });
      search = new Controls.Button(10, 7, 2, 1, {
        text: 'Search'
      });
      search.onClick(function() {
        console.log('Searching for ' + query);
        console.log("/appSearchJSON?query=" + query);
        return util.getAsync("/appSearchJSON?query=" + query, function(data) {
          searchResults = data;
          return selectionIndex = 0;
        });
      });
      panel.add(search);
      recentButton = new Controls.Button(0, 7, 4, 1, {
        text: '< Recent Apps'
      });
      panel.add(recentButton);
      return recentButton.onClick(function() {
        mode = modes[0];
        return resetPanel(panel);
      });
    }
  };
  update = function() {
    mode = modes[0];
    return resetPanel(state.appSwitcher.panel);
  };
  update();
  return state.onAppListUpdate(update);
};

// Generated by CoffeeScript 1.7.1
var every, numColumns, numRows, state;

state = exports;

state.apps = [];

state.front = void 0;

state.back = void 0;

state.front_and_back = void 0;

state.points = [];

state.width = window.innerWidth;

state.height = window.innerHeight;

state.camera = void 0;

state.values = {};

state.valueListeners = {};

state.forceDistort = false;

state.mirrorViews = [];

state.mirrorData = {};

state.modes = {
  Normal: 'normal',
  AppSwitch: 'app-switch',
  Notifications: 'notifications'
};

state.notificationPanel = void 0;

state.appSwitcher = void 0;

state.topBar = void 0;

numColumns = 12;

numRows = 8;

state.unitWidth = 1 / numColumns;

state.unitHeight = 1 / (numRows + 1);

state.oldState = state.modes.Normal;

state.lastUpdate = 0;

state.BaseRotationEuler = new THREE.Euler();

state.BaseRotation = new THREE.Quaternion();

every = 0;

state.open = function(app, controls) {
  var index, index2, k, listener, v, _i, _j, _len, _len1, _ref, _ref1, _results;
  if (app.status === 'ready') {
    console.log('starting..');
    return state.start(app, controls);
  } else {
    index = state.user.recent.indexOf(app._id);
    if (index >= 0) {
      state.user.recent.splice(index, 1);
    }
    index2 = -1;
    _ref = state.apps;
    for (k = _i = 0, _len = _ref.length; _i < _len; k = ++_i) {
      v = _ref[k];
      if (v._id === app._id) {
        index2 = k;
      }
    }
    if (index2 >= 0) {
      state.apps.splice(index2, 1);
    }
    state.apps.push(app);
    state.user.recent.push(app._id);
    $.post('http://vos.jit.su/newAppUsed?token=' + token, {
      appID: app._id
    });

    /*
    if not (state.front_and_back? and state.front_and_back.index is app.index) and 
            not (state.front? and state.front.index is app.index) and 
            not (state.back? and state.back.index is app.index) and state.user? and
            app._id not in state.user.recent
        state.user.recent.push(app._id)
        $.post('http://vos.jit.su/recentApps?token=' + token, {recent: state.user.recent})
     */
    if ((state.back != null) && state.back.index === app.index) {
      state.back = null;
      state.front = null;
      state.front_and_back = app;
    } else if ((state.front_and_back == null) || state.front_and_back.index !== app.index) {
      if (app.external.drawContained != null) {
        if ((state.front_and_back != null) && (state.front_and_back.external.drawImmersiveBackground != null)) {
          state.back = state.front_and_back;
        }
        state.front_and_back = null;
        state.front = app;
      } else if (app.external.drawImmersive != null) {
        state.front = null;
        state.back = null;
        state.front_and_back = app;
      } else if (app.external.drawImmersiveBackground != null) {
        state.front_and_back = null;
        state.back = app;
      }
    }
    state.mode = state.modes.Normal;
    _ref1 = state.onAppListUpdate.listeners;
    _results = [];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      listener = _ref1[_j];
      _results.push(listener());
    }
    return _results;
  }
};

state.onAppListUpdate = function(func) {
  return state.onAppListUpdate.listeners.push(func);
};

state.onAppListUpdate.listeners = [];

state.fromURL = "/";

state.start = function(app, controls) {
  var listener, loaded, other, _i, _j, _len, _len1, _ref, _ref1;
  other = void 0;
  _ref = state.apps;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    loaded = _ref[_i];
    if (loaded._id === app._id && loaded.status === 'started') {
      other = loaded;
    }
  }
  if (other != null) {
    return other;
  } else {
    app.panel = new controls.Panel(app);
    app.index = state.apps.length;
    
        app.quaternion = {
            get x() {
                return state.camera.quaternion.x
            },
            get y() {
                return state.camera.quaternion.y
            },
            get z() {
                return state.camera.quaternion.z
            },
            get w() {
                return state.camera.quaternion.w
            }
        };
        ;
    app.external = {
      panel: app.panel,
      user: {
        id: state.user.id,
        name: state.user.name
      }
    };
    (function(load, app) {
      return load(app);
    })(app.event.load, app.external);
    app.status = 'started';
    _ref1 = state.onAppListUpdate.listeners;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      listener = _ref1[_j];
      listener();
    }
    state.open(app, controls);
    return app;
  }
};

state.canMaximize = function() {
  return (state.front != null) && (state.front.external.drawImmersive != null);
};

state.canMinimize = function() {
  return (state.front_and_back != null) && (state.front_and_back.external.drawContained != null);
};

state.getPanelApp = function() {
  if (state.front != null) {
    return state.front;
  } else if (state.front_and_back != null) {
    return state.front_and_back;
  }
  return null;
};

state.minimize = function() {
  if (state.canMinimize()) {
    state.front = state.front_and_back;
    return state.front_and_back = null;
  }
};

state.maximize = function() {
  if (state.canMaximize()) {
    state.front_and_back = state.front;
    state.front = null;
    return state.back = null;
  }
};

state.toggleMaxMin = function() {
  if (state.front != null) {
    return state.maximize();
  } else if (state.front_and_back != null) {
    return state.minimize();
  }
};

state.close = function() {
  if (state.front != null) {
    if ((state.back != null) && (state.back.external.drawImmersive != null)) {
      state.front_and_back = state.back;
      state.back = null;
    }
    state.front = null;
  } else if (state.front_and_back != null) {
    state.front_and_back = null;
  } else if (state.back != null) {
    state.back = null;
  }
  if ((state.front == null) && (state.front_and_back == null)) {
    return state.mode = state.modes.AppSwitch;
  }
};

state.drawPanel = function(scene, util) {
  var ambient, circle, circle_amplitude, directLight, mesh, meshes, mobileDataURI, mobileScene, object, objects, panelApp, panelMesh, point, redLambert, welcomeText, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1;
  redLambert = new THREE.MeshLambertMaterial({
    color: 0xCC0000
  });
  panelMesh = new THREE.Mesh(new THREE.PlaneGeometry(80, 30), redLambert);
  panelMesh.position.x = state.camera.position.x + 0;
  panelMesh.position.y = state.camera.position.y + 80;
  panelMesh.position.z = state.camera.position.z - 20;
  panelMesh.rotation.x = -1.1 + Math.PI / 2;
  panelApp = state.getPanelApp();
  mobileScene = new THREE.Scene();
  if (state.topBar.state !== 'mobile') {
    welcomeText = util.makeText('Remote Control Area', 40, 0.4, 0.1);
    welcomeText.position.x = 0.5;
    welcomeText.position.y = 0.5;
    mobileScene.add(welcomeText);
  }
  _ref = state.topBar.draw();
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    mesh = _ref[_i];
    if (state.topBar.state !== 'overlay') {
      mobileScene.add(util.cloneMesh(mesh));
    }
    util.setPanelPosition(panelMesh, mesh, mesh.position.x, mesh.position.y, mesh.position.z);
    if (state.topBar.state !== 'mobile') {
      scene.add(mesh);
    }
  }
  objects = [];
  if (state.topBar.state !== 'moving') {
    switch (state.mode) {
      case state.modes.Normal:
        if (panelApp != null) {
          objects = objects.concat(panelApp.panel.objects);
        }
        break;
      case state.modes.Notifications:
        objects = objects.concat(state.notificationPanel.objects);
        break;
      case state.modes.AppSwitch:
        objects = objects.concat(state.appSwitcher.panel.objects);
    }
    state.oldState = state.mode;
  }
  for (_j = 0, _len1 = objects.length; _j < _len1; _j++) {
    object = objects[_j];
    meshes = object.draw();
    if (meshes != null) {
      for (_k = 0, _len2 = meshes.length; _k < _len2; _k++) {
        mesh = meshes[_k];
        if (state.topBar.state === 'mobile') {
          mesh.position.y += 1 / 12;
          mobileScene.add(util.cloneMesh(mesh));
        }
        util.setPanelPosition(panelMesh, mesh, mesh.position.x, mesh.position.y, mesh.position.z);
        if (state.topBar.state === 'overlay') {
          scene.add(mesh);
        }
      }
    }
  }
  if (state.topBar.state === 'overlay') {
    scene.add(panelMesh);
  }
  circle_amplitude = 0.01;
  _ref1 = state.points;
  for (_l = 0, _len3 = _ref1.length; _l < _len3; _l++) {
    point = _ref1[_l];
    if ((point != null) && (point.x != null) && (point.y != null)) {
      circle = util.makeCircle(circle_amplitude);
      circle.position.x = point.x;
      circle.position.y = point.y;
      circle.position.z = 0.12;
      if (state.topBar.state === 'mobile') {
        circle.position.y += 1 / 12;
        mobileScene.add(util.cloneLine(circle));
      }
      util.setPanelPosition(panelMesh, circle, circle.position.x, circle.position.y, circle.position.z);
      if (state.topBar.state !== 'mobile') {
        scene.add(circle);
      }
    }
  }
  ambient = new THREE.AmbientLight(0xeeeeee);
  directLight = new THREE.DirectionalLight(0xFFFFFF);
  directLight.position.x = 0;
  directLight.position.y = 0;
  directLight.position.z = 20;
  mobileScene.add(state.mobileCamera);
  mobileScene.add(ambient);
  state.mobileRenderer.render(mobileScene, state.mobileCamera);
  mobileDataURI = state.mobileRenderer.domElement.toDataURL();
  if ((state.socket != null) && every % 5 === 0) {
    state.socket.emit('visual', mobileDataURI);
  }
  return every++;
};

$.ajax({
  url: 'http://vos.jit.su/static/wordlist.txt',
  success: function(wordlist) {
    return state.wordlist = wordlist.split('\r\n');
  }
});

// Generated by CoffeeScript 1.7.1
var every, numColumns, numRows, state,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

state = exports;

state.apps = [];

state.front = void 0;

state.back = void 0;

state.front_and_back = void 0;

state.points = [];

state.width = window.innerWidth;

state.height = window.innerHeight;

state.camera = void 0;

state.values = {};

state.valueListeners = {};

state.modes = {
  Normal: 'normal',
  AppSwitch: 'app-switch',
  Notifications: 'notifications'
};

state.notificationPanel = void 0;

state.appSwitcher = void 0;

state.topBar = void 0;

numColumns = 12;

numRows = 8;

state.unitWidth = 1 / numColumns;

state.unitHeight = 1 / (numRows + 1);

state.oldState = state.modes.Normal;

state.lastUpdate = 0;

state.BaseRotationEuler = new THREE.Vector3();

state.BaseRotation = new THREE.Quaternion();

every = 0;

state.open = function(app) {
  var listener, _i, _len, _ref, _ref1, _results;
  if (!((state.front_and_back != null) && state.front_and_back.index === app.index) && !((state.front != null) && state.front.index === app.index) && !((state.back != null) && state.back.index === app.index) && (state.user != null) && (_ref = app._id, __indexOf.call(state.user.recent, _ref) < 0)) {
    state.user.recent.push(app._id);
    $.post('http://vos.jit.su/recentApps?token=' + token, {
      recent: state.user.recent
    });
  }
  if ((state.back != null) && state.back.index === app.index) {
    state.back = null;
    state.front = null;
    state.front_and_back = app;
  } else if ((state.front_and_back == null) || state.front_and_back.index !== app.index) {
    if (app.external.drawContained != null) {
      if ((state.front_and_back != null) && (state.front_and_back.external.drawImmersiveBackground != null)) {
        state.back = state.front_and_back;
      }
      state.front_and_back = null;
      state.front = app;
    } else if (app.external.drawImmersive != null) {
      state.front = null;
      state.back = null;
      state.front_and_back = app;
    } else if (app.external.drawImmersiveBackground != null) {
      state.front_and_back = null;
      state.back = app;
    }
  }
  state.mode = state.modes.Normal;
  _ref1 = state.onAppListUpdate.listeners;
  _results = [];
  for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
    listener = _ref1[_i];
    _results.push(listener());
  }
  return _results;
};

state.onAppListUpdate = function(func) {
  return state.onAppListUpdate.listeners.push(func);
};

state.onAppListUpdate.listeners = [];

state.fromURL = "/";

state.add = function(app, controls) {
  var listener, _i, _len, _ref;
  app.panel = new controls.Panel(app);
  app.index = state.apps.length;
  state.apps.push(app);
  app.external = {
    panel: app.panel,
    user: {
      id: state.user.id,
      name: state.user.name
    }
  };
  (function(load, app) {
    return load(app);
  })(app.event.load, app.external);
  _ref = state.onAppListUpdate.listeners;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    listener = _ref[_i];
    listener();
  }
  return app;
};

state.canMaximize = function() {
  return (state.front != null) && (state.front.external.drawImmersive != null);
};

state.canMinimize = function() {
  return (state.front_and_back != null) && (state.front_and_back.external.drawContained != null);
};

state.getPanelApp = function() {
  if (state.front != null) {
    return state.front;
  } else if (state.front_and_back != null) {
    return state.front_and_back;
  }
  return null;
};

state.minimize = function() {
  if (state.canMinimize()) {
    state.front = state.front_and_back;
    return state.front_and_back = null;
  }
};

state.maximize = function() {
  if (state.canMaximize()) {
    state.front_and_back = state.front;
    state.front = null;
    return state.back = null;
  }
};

state.toggleMaxMin = function() {
  if (state.front != null) {
    return state.maximize();
  } else if (state.front_and_back != null) {
    return state.minimize();
  }
};

state.close = function() {
  if (state.front != null) {
    if ((state.back != null) && (state.back.external.drawImmersive != null)) {
      state.front_and_back = state.back;
      state.back = null;
    }
    state.front = null;
  } else if (state.front_and_back != null) {
    state.front_and_back = null;
  } else if (state.back != null) {
    state.back = null;
  }
  if ((state.front == null) && (state.front_and_back == null)) {
    return state.mode = state.modes.AppSwitch;
  }
};

state.drawPanel = function(scene, util) {
  var ambient, circle, circle_amplitude, directLight, mesh, meshes, mobileDataURI, mobileScene, object, objects, panelApp, panelMesh, point, redLambert, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1;
  redLambert = new THREE.MeshLambertMaterial({
    color: 0xCC0000
  });
  panelMesh = new THREE.Mesh(new THREE.PlaneGeometry(80, 30), redLambert);
  panelMesh.position.x = state.camera.position.x + 0;
  panelMesh.position.y = state.camera.position.y + 80;
  panelMesh.position.z = state.camera.position.z - 20;
  panelMesh.rotation.x = -1.1 + Math.PI / 2;
  panelApp = state.getPanelApp();
  mobileScene = new THREE.Scene();
  _ref = state.topBar.draw();
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    mesh = _ref[_i];
    if (state.topBar.state !== 'overlay') {
      mobileScene.add(util.cloneMesh(mesh));
    }
    util.setPanelPosition(panelMesh, mesh, mesh.position.x, mesh.position.y, mesh.position.z);
    if (state.topBar.state !== 'mobile') {
      scene.add(mesh);
    }
  }
  objects = [];
  if (state.topBar.state !== 'moving') {
    switch (state.mode) {
      case state.modes.Normal:
        if (panelApp != null) {
          objects = objects.concat(panelApp.panel.objects);
        }
        break;
      case state.modes.Notifications:
        objects = objects.concat(state.notificationPanel.objects);
        break;
      case state.modes.AppSwitch:
        objects = objects.concat(state.appSwitcher.panel.objects);
    }
    state.oldState = state.mode;
  }
  for (_j = 0, _len1 = objects.length; _j < _len1; _j++) {
    object = objects[_j];
    meshes = object.draw();
    if (meshes != null) {
      for (_k = 0, _len2 = meshes.length; _k < _len2; _k++) {
        mesh = meshes[_k];
        if (state.topBar.state === 'mobile') {
          mesh.position.y += 1 / 12;
          mobileScene.add(util.cloneMesh(mesh));
        }
        util.setPanelPosition(panelMesh, mesh, mesh.position.x, mesh.position.y, mesh.position.z);
        if (state.topBar.state === 'overlay') {
          scene.add(mesh);
        }
      }
    }
  }
  if (state.topBar.state === 'overlay') {
    scene.add(panelMesh);
  }
  circle_amplitude = 0.01;
  _ref1 = state.points;
  for (_l = 0, _len3 = _ref1.length; _l < _len3; _l++) {
    point = _ref1[_l];
    if ((point != null) && (point.x != null) && (point.y != null)) {
      circle = util.makeCircle(circle_amplitude);
      circle.position.x = point.x;
      circle.position.y = point.y;
      circle.position.z = 0.12;
      if (state.topBar.state === 'mobile') {
        circle.position.y += 1 / 12;
        mobileScene.add(util.cloneLine(circle));
      }
      util.setPanelPosition(panelMesh, circle, circle.position.x, circle.position.y, circle.position.z);
      if (state.topBar.state !== 'mobile') {
        scene.add(circle);
      }
    }
  }
  ambient = new THREE.AmbientLight(0xeeeeee);
  directLight = new THREE.DirectionalLight(0xFFFFFF);
  directLight.position.x = 0;
  directLight.position.y = 0;
  directLight.position.z = 20;
  mobileScene.add(state.mobileCamera);
  mobileScene.add(ambient);
  state.mobileRenderer.render(mobileScene, state.mobileCamera);
  mobileDataURI = state.mobileRenderer.domElement.toDataURL();
  if ((state.socket != null) && every % 10 === 0) {
    state.socket.emit('visual', mobileDataURI);
  }
  return every++;
};

$.ajax({
  url: 'http://vos.jit.su/static/wordlist.txt',
  success: function(wordlist) {
    return state.wordlist = wordlist.split('\r\n');
  }
});
